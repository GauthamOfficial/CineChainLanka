# Generated by Django 5.2.5 on 2025-09-09 10:36

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("campaigns", "0003_alter_campaign_cover_image"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="BlockchainNetwork",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Network name", max_length=50, unique=True
                    ),
                ),
                (
                    "network_type",
                    models.CharField(
                        choices=[
                            ("ethereum", "Ethereum"),
                            ("polygon", "Polygon"),
                            ("polygon_mumbai", "Polygon Mumbai"),
                            ("bsc", "Binance Smart Chain"),
                            ("bsc_testnet", "BSC Testnet"),
                        ],
                        help_text="Type of blockchain network",
                        max_length=20,
                    ),
                ),
                (
                    "chain_id",
                    models.PositiveIntegerField(
                        help_text="Blockchain chain ID", unique=True
                    ),
                ),
                ("rpc_url", models.URLField(help_text="RPC endpoint URL")),
                (
                    "explorer_url",
                    models.URLField(blank=True, help_text="Block explorer URL"),
                ),
                (
                    "is_testnet",
                    models.BooleanField(
                        default=False, help_text="Whether this is a testnet"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this network is active"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Blockchain Network",
                "verbose_name_plural": "Blockchain Networks",
                "db_table": "blockchain_networks",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SmartContract",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(help_text="Contract name", max_length=100)),
                (
                    "contract_type",
                    models.CharField(
                        choices=[
                            ("campaign_funding", "Campaign Funding"),
                            ("nft", "NFT Contract"),
                            ("royalty", "Royalty Distribution"),
                            ("token", "Token Contract"),
                        ],
                        help_text="Type of smart contract",
                        max_length=20,
                    ),
                ),
                (
                    "address",
                    models.CharField(
                        help_text="Contract address on blockchain",
                        max_length=42,
                        unique=True,
                    ),
                ),
                (
                    "abi",
                    models.JSONField(
                        help_text="Contract ABI (Application Binary Interface)"
                    ),
                ),
                (
                    "bytecode",
                    models.TextField(blank=True, help_text="Contract bytecode"),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether contract is verified on block explorer",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether contract is active"
                    ),
                ),
                (
                    "deployment_tx_hash",
                    models.CharField(
                        blank=True,
                        help_text="Deployment transaction hash",
                        max_length=66,
                    ),
                ),
                (
                    "deployment_block",
                    models.PositiveIntegerField(
                        blank=True, help_text="Block number when deployed", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "network",
                    models.ForeignKey(
                        help_text="Blockchain network",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contracts",
                        to="blockchain.blockchainnetwork",
                    ),
                ),
            ],
            options={
                "verbose_name": "Smart Contract",
                "verbose_name_plural": "Smart Contracts",
                "db_table": "smart_contracts",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="IPFSFile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ipfs_hash",
                    models.CharField(
                        help_text="IPFS hash of the file", max_length=46, unique=True
                    ),
                ),
                (
                    "file_name",
                    models.CharField(help_text="Original file name", max_length=255),
                ),
                (
                    "file_type",
                    models.CharField(
                        choices=[
                            ("image", "Image"),
                            ("video", "Video"),
                            ("audio", "Audio"),
                            ("document", "Document"),
                            ("metadata", "Metadata"),
                            ("other", "Other"),
                        ],
                        default="other",
                        help_text="Type of file",
                        max_length=20,
                    ),
                ),
                (
                    "file_size",
                    models.PositiveIntegerField(help_text="File size in bytes"),
                ),
                (
                    "mime_type",
                    models.CharField(help_text="MIME type of the file", max_length=100),
                ),
                ("ipfs_url", models.URLField(help_text="IPFS URL for the file")),
                (
                    "gateway_urls",
                    models.JSONField(default=list, help_text="Available gateway URLs"),
                ),
                (
                    "nft_id",
                    models.PositiveIntegerField(
                        blank=True, help_text="Related NFT ID", null=True
                    ),
                ),
                (
                    "is_pinned",
                    models.BooleanField(
                        default=False, help_text="Whether file is pinned to IPFS"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "campaign",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related campaign",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ipfs_files",
                        to="campaigns.campaign",
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        help_text="User who uploaded the file",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ipfs_files",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "IPFS File",
                "verbose_name_plural": "IPFS Files",
                "db_table": "ipfs_files",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["ipfs_hash"], name="ipfs_files_ipfs_ha_ee526f_idx"
                    ),
                    models.Index(
                        fields=["file_type"], name="ipfs_files_file_ty_54b380_idx"
                    ),
                    models.Index(
                        fields=["uploaded_by"], name="ipfs_files_uploade_fdc838_idx"
                    ),
                    models.Index(
                        fields=["campaign"], name="ipfs_files_campaig_fadbd5_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="ipfs_files_created_e0b143_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="BlockchainTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tx_hash",
                    models.CharField(
                        help_text="Transaction hash", max_length=66, unique=True
                    ),
                ),
                (
                    "block_number",
                    models.PositiveIntegerField(
                        blank=True, help_text="Block number", null=True
                    ),
                ),
                (
                    "block_hash",
                    models.CharField(blank=True, help_text="Block hash", max_length=66),
                ),
                (
                    "from_address",
                    models.CharField(help_text="Sender address", max_length=42),
                ),
                (
                    "to_address",
                    models.CharField(help_text="Recipient address", max_length=42),
                ),
                (
                    "value",
                    models.DecimalField(
                        decimal_places=18,
                        default=0,
                        help_text="Transaction value in ETH/BNB",
                        max_digits=36,
                    ),
                ),
                (
                    "gas_used",
                    models.PositiveIntegerField(
                        blank=True, help_text="Gas used", null=True
                    ),
                ),
                (
                    "gas_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=18,
                        help_text="Gas price in Gwei",
                        max_digits=36,
                        null=True,
                    ),
                ),
                (
                    "function_name",
                    models.CharField(
                        blank=True,
                        help_text="Function called on contract",
                        max_length=100,
                    ),
                ),
                (
                    "function_args",
                    models.JSONField(
                        blank=True, default=dict, help_text="Function arguments"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("confirmed", "Confirmed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("contribution", "Campaign Contribution"),
                            ("nft_mint", "NFT Minting"),
                            ("nft_transfer", "NFT Transfer"),
                            ("refund", "Refund"),
                            ("withdrawal", "Withdrawal"),
                            ("royalty_payment", "Royalty Payment"),
                        ],
                        help_text="Type of transaction",
                        max_length=20,
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error message if transaction failed"
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional transaction metadata",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "campaign",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related campaign",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="blockchain_transactions",
                        to="campaigns.campaign",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who initiated transaction",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="blockchain_transactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "contract",
                    models.ForeignKey(
                        blank=True,
                        help_text="Smart contract involved",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="transactions",
                        to="blockchain.smartcontract",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blockchain Transaction",
                "verbose_name_plural": "Blockchain Transactions",
                "db_table": "blockchain_transactions",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["tx_hash"], name="blockchain__tx_hash_a4c925_idx"
                    ),
                    models.Index(
                        fields=["status"], name="blockchain__status_946598_idx"
                    ),
                    models.Index(
                        fields=["user"], name="blockchain__user_id_f60b35_idx"
                    ),
                    models.Index(
                        fields=["campaign"], name="blockchain__campaig_1ba613_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="blockchain__created_35199d_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Wallet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "address",
                    models.CharField(help_text="Wallet address", max_length=42),
                ),
                (
                    "wallet_type",
                    models.CharField(
                        choices=[
                            ("metamask", "MetaMask"),
                            ("trustwallet", "Trust Wallet"),
                            ("coinbase", "Coinbase Wallet"),
                            ("walletconnect", "WalletConnect"),
                            ("other", "Other"),
                        ],
                        help_text="Type of wallet",
                        max_length=20,
                    ),
                ),
                (
                    "is_primary",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is the user's primary wallet",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False, help_text="Whether wallet is verified"
                    ),
                ),
                (
                    "last_used",
                    models.DateTimeField(
                        blank=True, help_text="Last time wallet was used", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "network",
                    models.ForeignKey(
                        help_text="Primary network for this wallet",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="wallets",
                        to="blockchain.blockchainnetwork",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Wallet owner",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="wallets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Wallet",
                "verbose_name_plural": "Wallets",
                "db_table": "wallets",
                "ordering": ["-is_primary", "-last_used"],
                "unique_together": {("user", "address", "network")},
            },
        ),
    ]
