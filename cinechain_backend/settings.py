"""
Django settings for cinechain_backend project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables
load_dotenv()

# Load contract addresses from .env.contracts if it exists
contracts_env_path = BASE_DIR / '.env.contracts'
if contracts_env_path.exists():
    load_dotenv(contracts_env_path)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', "django-insecure--3kp&z--j=)kjne%)gxitk!dgv7mussfi*ocz9v8z9=qwt#=bp")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    # Third party apps
    "rest_framework",
    "corsheaders",
    "django_filters",
    "django_extensions",
    # "django_ratelimit",  # Temporarily disabled due to cache backend incompatibility
    
    # Local apps
    "funding",
    "users",
    "campaigns",
    "payments",
    "kyc",
    "blockchain",
    "revenue",
    "marketplace",
    "analytics",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "cinechain_backend.performance_monitor.PerformanceMonitoringMiddleware",
]

ROOT_URLCONF = "cinechain_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "cinechain_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.getenv('DB_NAME', 'cinechain_lanka'),
        "USER": os.getenv('DB_USER', 'root'),
        "PASSWORD": os.getenv('DB_PASSWORD', ''),
        "HOST": os.getenv('DB_HOST', 'localhost'),
        "PORT": os.getenv('DB_PORT', '3306'),
        "OPTIONS": {
            "charset": "utf8mb4",
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}

# Fallback to SQLite for development if MySQL is not available
if not os.getenv('DB_NAME'):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Colombo"

USE_I18N = True

USE_TZ = True

# Supported languages
LANGUAGES = [
    ('en', 'English'),
    ('si', 'Sinhala'),
    ('ta', 'Tamil'),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom user model
AUTH_USER_MODEL = 'users.User'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
}

# JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}

# CORS settings
CORS_ALLOW_ALL_ORIGINS = DEBUG  # Only for development
CORS_ALLOW_CREDENTIALS = True

# Allow specific origins for development
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

if not DEBUG:
    CORS_ALLOWED_ORIGINS = [
        "https://cinechainlanka.com",
        "https://www.cinechainlanka.com",
    ]

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')

# Redis settings for caching
REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost:6379/0')

# Cache configuration
# Use local memory cache instead of Redis for development
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'KEY_PREFIX': 'cinechain',
        'TIMEOUT': 300,  # 5 minutes default timeout
    },
    'sessions': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake-sessions',
        'KEY_PREFIX': 'cinechain_sessions',
        'TIMEOUT': 86400,  # 24 hours for sessions
    },
    'api': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake-api',
        'KEY_PREFIX': 'cinechain_api',
        'TIMEOUT': 600,  # 10 minutes for API responses
    },
}

# Session configuration
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'sessions'
SESSION_COOKIE_AGE = 86400  # 24 hours

# Cache middleware
CACHE_MIDDLEWARE_ALIAS = 'default'
CACHE_MIDDLEWARE_SECONDS = 300  # 5 minutes
CACHE_MIDDLEWARE_KEY_PREFIX = 'cinechain'

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Create logs directory if it doesn't exist
os.makedirs(BASE_DIR / 'logs', exist_ok=True)

# IPFS Configuration
IPFS_GATEWAY_URLS = [
    'https://ipfs.io/ipfs/',
    'https://gateway.pinata.cloud/ipfs/',
    'https://cloudflare-ipfs.com/ipfs/',
]

# Pinata IPFS Service Configuration
PINATA_API_KEY = os.getenv('PINATA_API_KEY', '')
PINATA_SECRET_KEY = os.getenv('PINATA_SECRET_KEY', '')

# Blockchain Configuration
BLOCKCHAIN_NETWORKS = {
    'ethereum': {
        'chain_id': 1,
        'rpc_url': os.getenv('ETHEREUM_RPC_URL', 'https://mainnet.infura.io/v3/YOUR_PROJECT_ID'),
        'explorer_url': 'https://etherscan.io',
        'is_testnet': False,
    },
    'polygon': {
        'chain_id': 137,
        'rpc_url': os.getenv('POLYGON_RPC_URL', 'https://polygon-rpc.com'),
        'explorer_url': 'https://polygonscan.com',
        'is_testnet': False,
    },
    'polygon_mumbai': {
        'chain_id': 80001,
        'rpc_url': os.getenv('MUMBAI_RPC_URL', 'https://rpc-mumbai.maticvigil.com'),
        'explorer_url': 'https://mumbai.polygonscan.com',
        'is_testnet': True,
    },
}

# Smart Contract Addresses (will be populated after deployment)
SMART_CONTRACT_ADDRESSES = {
    'campaign_funding': os.getenv('CAMPAIGN_FUNDING_CONTRACT_ADDRESS', ''),
    'nft': os.getenv('NFT_CONTRACT_ADDRESS', ''),
    'usdt': os.getenv('USDT_CONTRACT_ADDRESS', ''),
}

# Gas Price Settings (in Gwei)
DEFAULT_GAS_PRICE = 20
MAX_GAS_PRICE = 100
GAS_PRICE_MULTIPLIER = 1.1

# Web3 Configuration
WEB3_RPC_URL = os.getenv('WEB3_RPC_URL', 'http://localhost:8545')
PRIVATE_KEY = os.getenv('PRIVATE_KEY', '')

# Smart Contract Addresses (from deployment)
CAMPAIGN_FUNDING_ADDRESS = os.getenv('CAMPAIGN_FUNDING_ADDRESS', '')
CINECHAIN_NFT_ADDRESS = os.getenv('CINECHAIN_NFT_ADDRESS', '')
ROYALTY_DISTRIBUTION_ADDRESS = os.getenv('ROYALTY_DISTRIBUTION_ADDRESS', '')
USDT_CONTRACT_ADDRESS = os.getenv('USDT_CONTRACT_ADDRESS', '')
PLATFORM_WALLET_ADDRESS = os.getenv('PLATFORM_WALLET_ADDRESS', '')

# OTT Platform Configuration
OTT_PLATFORMS = {
    'netflix': {
        'api_endpoint': os.getenv('NETFLIX_API_ENDPOINT', ''),
        'api_key': os.getenv('NETFLIX_API_KEY', ''),
        'webhook_secret': os.getenv('NETFLIX_WEBHOOK_SECRET', ''),
    },
    'amazon_prime': {
        'api_endpoint': os.getenv('AMAZON_PRIME_API_ENDPOINT', ''),
        'api_key': os.getenv('AMAZON_PRIME_API_KEY', ''),
        'webhook_secret': os.getenv('AMAZON_PRIME_WEBHOOK_SECRET', ''),
    },
    'disney_plus': {
        'api_endpoint': os.getenv('DISNEY_PLUS_API_ENDPOINT', ''),
        'api_key': os.getenv('DISNEY_PLUS_API_KEY', ''),
        'webhook_secret': os.getenv('DISNEY_PLUS_WEBHOOK_SECRET', ''),
    },
}

# Revenue Distribution Settings
DEFAULT_CREATOR_PERCENTAGE = 30.0  # 30%
DEFAULT_PLATFORM_PERCENTAGE = 5.0  # 5%
DEFAULT_INVESTOR_PERCENTAGE = 65.0  # 65%

# Marketplace Settings
MARKETPLACE_PLATFORM_FEE_PERCENTAGE = 2.5  # 2.5%
MARKETPLACE_CREATOR_ROYALTY_PERCENTAGE = 5.0  # 5%
MARKETPLACE_MINIMUM_LISTING_PRICE = 1.0  # 1 USDT
MARKETPLACE_MAXIMUM_LISTING_PRICE = 1000000.0  # 1M USDT
MARKETPLACE_AUCTION_DURATION_HOURS = 72  # 72 hours

# Analytics Settings
ANALYTICS_CACHE_TTL = 300  # 5 minutes
ANALYTICS_BATCH_SIZE = 100

# Rate Limiting Configuration
RATELIMIT_USE_CACHE = 'api'
RATELIMIT_ENABLE = not DEBUG

# Performance Optimization Settings
DATABASE_CONNECTION_POOL_SIZE = 20
DATABASE_CONNECTION_MAX_AGE = 0  # 0 means connections are closed after each request

# Static files optimization
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = DEBUG

# Database query optimization
if DATABASES['default']['ENGINE'] == 'django.db.backends.mysql':
    DATABASES['default']['OPTIONS'].update({
        'charset': 'utf8mb4',
        'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        'autocommit': True,
        'isolation_level': None,
    })

# Connection pooling for production
if not DEBUG and DATABASES['default']['ENGINE'] == 'django.db.backends.mysql':
    DATABASES['default']['OPTIONS'].update({
        'CONN_MAX_AGE': 60,  # 1 minute
        'CONN_HEALTH_CHECKS': True,
    })

# API Performance Settings
REST_FRAMEWORK.update({
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour',
        'burst': '20/minute',
    }
})

# Security Headers
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# Performance Monitoring
PERFORMANCE_MONITORING = {
    'ENABLED': True,
    'SLOW_QUERY_THRESHOLD': 0.1,  # 100ms
    'SLOW_REQUEST_THRESHOLD': 1.0,  # 1 second
    'LOG_SLOW_QUERIES': True,
    'LOG_SLOW_REQUESTS': True,
}

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'revenue': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'marketplace': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'blockchain': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}
